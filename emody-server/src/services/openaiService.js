// emody-server/src/services/openaiService.js

import dotenv from "dotenv";
dotenv.config();

import OpenAI from "openai";

// ‚úÖ OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "",
});

// üîê ÌÇ§ Î°úÎìú ÌôïÏù∏ (Ïïû 10ÏûêÎ¶¨Îßå Î°úÍ∑∏)
console.log("‚úÖ OPENAI_API_KEY:", process.env.OPENAI_API_KEY?.slice(0, 10));

// üìå Í∏∞Î≥∏ ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ (ÌïúÍµ≠Ïñ¥)
const baseSystemPromptKo = `ÎãπÏã†ÏùÄ Í∞êÏ†ï Î∂ÑÏÑù Ï†ÑÎ¨∏Í∞ÄÏù¥Ïûê ÏùåÏïÖ ÏπòÎ£åÏÇ¨ÏûÖÎãàÎã§. 
ÏÇ¨Ïö©ÏûêÏùò ÌÖçÏä§Ìä∏(ÌòπÏùÄ Í∞êÏ†ï Îã®Ïñ¥)Î•º Î∂ÑÏÑùÌïòÏó¨ Îã§Ïùå 9Í∞ÄÏßÄ Í∞êÏ†ï Ï§ë ÌïòÎÇòÎ°ú Î∂ÑÎ•òÌïòÍ≥†, 
ÏúÑÎ°úÏùò Îßê(comfortMessage), ÏúÑÏù∏Ïùò Î™ÖÏñ∏(inspirationalQuote), ÏùåÏïÖ Ï∂îÏ≤ú(musicRecommendation),
Í∑∏Î¶¨Í≥† StableAudioÏö© aiMusicPromptÎ•º Ìè¨Ìï®Ìïú JSONÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî.

Í∞êÏ†ï Ï¢ÖÎ•ò: sadness, joy, anxiety, anger, tired, emptiness, touched, confident, shy`;

// üìå Ïñ∏Ïñ¥Î≥Ñ ÌîÑÎ°¨ÌîÑÌä∏
const emotionPrompts = {
  ko: {
    system: (useAiMusic = false) => `
${baseSystemPromptKo}

Î∞òÎìúÏãú ÏïÑÎûò JSON Íµ¨Ï°∞Î•º ÏßÄÏºúÏ£ºÏÑ∏Ïöî:

{
  "emotionType": "sadness | joy | anxiety | anger | tired | emptiness | touched | confident | shy",
  "comfortMessage": "string",
  "inspirationalQuote": "string",
  "musicRecommendation": {
    "searchQueries": ["string", "string", "string", "string", "string"],
    "genre": "string",
    "mood": "string"
  }${useAiMusic ? `,
  "aiMusicPrompt": "string"` : ""}
}
`,
    user: (text) =>
      `Îã§Ïùå ÌÖçÏä§Ìä∏(ÌòπÏùÄ Í∞êÏ†ï)Î•º Î∂ÑÏÑùÌïòÍ≥† JSONÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî: "${text}"`,
  },

  en: {
    system: (useAiMusic = false) => `
You are an emotion analysis expert and music therapist.
Analyze the user's input and classify it into one of 9 emotions.
Return a JSON object with the following structure:

{
  "emotionType": "sadness | joy | anxiety | anger | tired | emptiness | touched | confident | shy",
  "comfortMessage": "string",
  "inspirationalQuote": "string",
  "musicRecommendation": {
    "searchQueries": ["string", "string", "string", "string", "string"],
    "genre": "string",
    "mood": "string"
  }${useAiMusic ? `,
  "aiMusicPrompt": "string"` : ""}
}
`,
    user: (text) =>
      `Please analyze the following input (text or emotion) and return JSON: "${text}"`,
  },
};

// üìå Í∞êÏ†ï Î∂ÑÏÑù
export async function analyzeEmotion({ text, language = "ko", useAiMusic = false }) {
  try {
    const prompts = emotionPrompts[language] || emotionPrompts["en"];
    const systemPrompt = prompts.system(useAiMusic);

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: prompts.user(text) },
      ],
      response_format: { type: "json_object" },
      temperature: 0.7,
    });

    const result = JSON.parse(response.choices[0].message.content || "{}");

    return {
      emotionType: result.emotionType,
      comfortMessage: result.comfortMessage,
      inspirationalQuote: result.inspirationalQuote,
      musicRecommendation: result.musicRecommendation,
      aiMusicPrompt: result.aiMusicPrompt,
    };
  } catch (error) {
    console.error("‚ùå OpenAI analyzeEmotion error:", error);
    throw new Error("Failed to analyze emotion: " + (error.message || error));
  }
}

// üìå ÏÉÅÎã¥Ìòï Ï±ÑÌåÖ
export async function chatWithGpt(messages) {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages,
      temperature: 0.7,
    });
    return response.choices[0].message.content ?? "";
  } catch (error) {
    console.error("‚ùå OpenAI chatWithGpt error:", error);
    throw new Error("Failed to chat with GPT: " + (error.message || error));
  }
}
